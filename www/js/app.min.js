"use strict";

var rxControllers = angular.module("Controllers", [ "ngRoute" ]);

rxControllers.config([ "$routeProvider", function(a) {
    a.when("/index", {
        templateUrl: "modules/home/views/index.html",
        controller: "indexCtrl"
    }).when("/dashboard/:restaurantId", {
        templateUrl: "modules/restaurant/views/owner.html",
        controller: "detailCtrl",
        access: {
            requiredLogin: true
        }
    }).when("/manage/photos/:restaurantId", {
        templateUrl: "modules/photo/views/index.html",
        controller: "photoCtrl",
        access: {
            requiredLogin: true
        }
    }).when("/request/change/:restaurantId", {
        templateUrl: "modules/request/views/index.html",
        controller: "requestCtrl",
        access: {
            requiredLogin: true
        }
    }).when("/compare", {
        templateUrl: "modules/compare/views/index.html",
        controller: "compareCtrl",
        access: {
            requiredLogin: true
        }
    }).when("/restaurant/:restaurantId", {
        templateUrl: "modules/restaurant/views/detail.html",
        controller: "detailCtrl"
    }).when("/login", {
        templateUrl: "modules/login/views/loginFull.html",
        controller: "loginCtrl"
    }).when("/login/signup", {
        templateUrl: "modules/login/views/signUp.html",
        controller: "loginCtrl"
    });
} ]).factory("searchData", function() {
    var a = {};
    return {
        get: function() {
            return a;
        },
        set: function(b) {
            a = b;
        }
    };
}).controller("indexCtrl", [ "$scope", "$rootScope", "$http", "localStorageService", "$location", "restaurantSvr", "geoLocation", "$routeParams", "$anchorScroll", "searchData", function(a, b, c, d, e, f, g, h, i, j) {
    a.init = function() {
        a.$watch("user", function() {
            if (a.user && a.user.ownedRestaurants && a.user.ownedRestaurants.length) {
                f.getRestaurants({
                    "id-in": a.user.ownedRestaurants.join(),
                    "per-page": 50
                }).then(function(b) {
                    a.ownedRestaurants = b.items;
                });
            }
        });
        a.restaurantList = {
            page: 1,
            params: {
                sort: "popular",
                "price_range-greater-than-or-equal-to": 0,
                "price_range-less-than-or-equal-to": 4,
                "distance-less-than-or-equal-to": 1
            }
        };
        l();
        a.listedCategories = {
            Indian: false,
            "Indonesian Restaurant": false,
            Thai: false,
            Italian: false,
            Cafe: false,
            "Modern Australian": false,
            African: false,
            Vegetarian: false
        };
        a.allCategoriesSelected = true;
        a.ratingFilterValue = 0;
        a.trendFilterValue = 0;
        a.distanceFilterValue = 1;
        a.priceFilterOptions = [ {
            label: "$",
            value: 0
        }, {
            label: "$$",
            value: 1
        }, {
            label: "$$$",
            value: 2
        }, {
            label: "$$$$",
            value: 3
        }, {
            label: "$$$$$",
            value: 4
        } ];
        a.ratingFilterOptions = [ {
            label: "All ratings",
            value: 0
        }, {
            label: "Less than 60%",
            value: 1
        }, {
            label: "Greater than 60%",
            value: 60
        }, {
            label: "Greater than 70%",
            value: 70
        }, {
            label: "Greater than 80%",
            value: 80
        }, {
            label: "Greater than 90%",
            value: 90
        } ];
        a.distanceFilterOptions = [ {
            label: "Any distance",
            value: 0
        }, {
            label: "Less than 1 KM",
            value: 1
        }, {
            label: "Less than 2 KM",
            value: 2
        }, {
            label: "Less than 5 KM",
            value: 5
        }, {
            label: "Less than 10 KM",
            value: 10
        }, {
            label: "Greater than 10 KM",
            value: -10
        } ];
        a.trendFilterOptions = [ {
            label: "All",
            value: 0
        }, {
            label: "Less than 60%",
            value: 1
        }, {
            label: "Greater than 60%",
            value: 60
        }, {
            label: "Greater than 70%",
            value: 70
        }, {
            label: "Greater than 80%",
            value: 80
        }, {
            label: "Greater than 90%",
            value: 90
        } ];
        m();
        a.setAutoLocation(!h.formattedAddress);
        if (h.search) {
            var b = {};
            if (h.formattedAddress) {
                b["formatted-address"] = h.formattedAddress;
            }
            if (h.priceRange) {
                b["price_range"] = h.priceRange;
            }
            if (h.category) {
                b["category"] = h.category;
            }
            a.restaurantList.params = merge_objects(a.restaurantList.params, b);
            k();
        }
        a.avatarOptions = {
            animate: {
                duration: 1e3,
                enabled: true
            },
            barColor: "#428bca",
            size: 60,
            scaleColor: false,
            lineWidth: 5,
            lineCap: "circle"
        };
        a.$watch("restaurantList.params", function() {
            k();
        }, true);
        a.$watch("listedCategories", function() {
            var b = null;
            angular.forEach(a.listedCategories, function(a, c) {
                if (a === true) {
                    if (b === null) {
                        b = c;
                    } else {
                        b += "," + c;
                    }
                }
            });
            a.restaurantList.params["category-in"] = b;
            if (b == null) {
                delete a.restaurantList.params["category-in"];
            }
        }, true);
    };
    a.setAutoLocation = function(b) {
        a.nearMe = b;
        if (b === true) {
            if (!d.get("latitude") || !d.get("longitude")) {
                g.getLocation().then(function(a) {
                    d.add("latitude", a.coords.latitude);
                    d.add("longitude", a.coords.longitude);
                    k(null, true);
                });
            } else {
                k(null, true);
            }
        } else {
            d.remove("latitude");
            d.remove("longitude");
            k(null, false);
        }
    };
    a.popularListPageChanged = function() {
        var b = a.restaurantList.page;
        k({
            page: b
        });
    };
    function k(b, c) {
        if (b) {
            b = merge_objects(a.restaurantList.params, b);
        } else {
            b = a.restaurantList.params;
        }
        a.cgBusyPromise = f.getRestaurants(b);
        a.cgBusyPromise.then(function(d) {
            if (d.items.length == 0 && a.distanceFilterValue != 0 && c) {
                for (var e = 1; e < a.distanceFilterOptions.length - 1; e++) {
                    if (e == a.distanceFilterOptions.length - 2) {
                        a.distanceFilterValue = 0;
                        a.setDistanceFilter(a.distanceFilterValue);
                        break;
                    } else if (a.distanceFilterOptions[e].value == a.distanceFilterValue) {
                        a.distanceFilterValue = a.distanceFilterOptions[e + 1].value;
                        a.setDistanceFilter(a.distanceFilterValue);
                        break;
                    }
                }
                k(b, c);
            } else {
                a.restaurants = d.items;
                a.maxSize = 6;
                a.popularListItemPerPage = 8;
                a.popularListTotalItems = d._meta.totalCount;
                a.restaurantList.page = d._meta.currentPage;
                a.numPages = d._meta.pageCount;
            }
        });
    }
    a.options = {
        animate: {
            duration: 1e3,
            enabled: true
        },
        barColor: "#428bca",
        size: 60,
        scaleColor: false,
        lineWidth: 5,
        lineCap: "circle"
    };
    function l() {
        a.sidebar = "modules/partials/sidebar.html";
        a.header = "modules/partials/header.html";
        a.footer = "modules/partials/footer.html";
    }
    a.selectAllCategories = function(b) {
        angular.forEach(a.listedCategories, function(b, c) {
            a.listedCategories[c] = false;
        });
    };
    function m() {
        f.getRestaurantCategories().then(function(b) {
            a.allCategories = b;
        });
    }
    a.addCategory = function(b) {
        a.listedCategories[b] = true;
    };
    a.setRatingFilter = function(b) {
        if (b == 0) {
            delete a.restaurantList.params["percentile-greater-than-or-equal-to"];
            delete a.restaurantList.params["percentile-less-than-or-equal-to"];
        } else if (b == 1) {
            delete a.restaurantList.params["percentile-greater-than-or-equal-to"];
            a.restaurantList.params["percentile-less-than-or-equal-to"] = 60;
        } else {
            delete a.restaurantList.params["percentile-less-than-or-equal-to"];
            a.restaurantList.params["percentile-greater-than-or-equal-to"] = b;
        }
    };
    a.setTrendFilter = function(b) {
        if (b == 0) {
            delete a.restaurantList.params["trend-greater-than-or-equal-to"];
            delete a.restaurantList.params["trend-less-than-or-equal-to"];
        } else if (b == 1) {
            delete a.restaurantList.params["trend-greater-than-or-equal-to"];
            a.restaurantList.params["trend-less-than-or-equal-to"] = 60;
        } else {
            delete a.restaurantList.params["trend-less-than-or-equal-to"];
            a.restaurantList.params["trend-greater-than-or-equal-to"] = b;
        }
    };
    a.setDistanceFilter = function(b) {
        if (b == 0) {
            delete a.restaurantList.params["distance-greater-than-or-equal-to"];
            delete a.restaurantList.params["distance-less-than-or-equal-to"];
        } else if (b < 0) {
            delete a.restaurantList.params["distance-less-than-or-equal-to"];
            a.restaurantList.params["distance-greater-than-or-equal-to"] = -b;
        } else {
            delete a.restaurantList.params["distance-greater-than-or-equal-to"];
            a.restaurantList.params["distance-less-than-or-equal-to"] = b;
        }
    };
    a.toggleFiltersMobile = function() {
        a.showFiltersMobile = !a.showFiltersMobile;
        a.scrollTop();
    };
    a.scrollTop = i;
    a.init();
} ]).controller("navigationController", [ "$scope", "$http", "$location", function(a, b, c) {
    a.setRestaurant = function(a) {
        if (Object.keys(a).length) {
            c.path("/restaurant/" + a.data.id);
        }
    };
} ]).controller("searchCtrl", [ "$scope", "$http", "$location", "$routeParams", "restaurantSvr", "searchData", function(a, b, c, d, e, f) {
    a.restaurantList = {};
    a.search = {};
    e.getRestaurantCategories().then(function(b) {
        a.categories = b;
    });
    a.prices = [ {
        value: "$",
        numericValue: 0
    }, {
        value: "$$",
        numericValue: 1
    }, {
        value: "$$$",
        numericValue: 2
    }, {
        value: "$$$$",
        numericValue: 3
    }, {
        value: "$$$$$",
        numericValue: 4
    } ];
    a.getLocation = function(a) {
        return b.get("http://maps.googleapis.com/maps/api/geocode/json", {
            params: {
                address: a,
                sensor: false
            }
        }).then(function(a) {
            return a.data.results.map(function(a) {
                return {
                    formatted_address: a.formatted_address,
                    location: a.geometry.location
                };
            });
        });
    };
    if (d.search) {
        a.search = f.get();
    }
    a.searchRestaurant = function() {
        f.set(a.search);
        var b = "/index";
        if (a.search.formattedAddress || a.search.price || a.search.category) {
            b += "?search=true";
        }
        if (a.search.formattedAddress) b += "&formattedAddress=" + a.search.formattedAddress;
        if (a.search.price) b += "&priceRange=" + a.search.price;
        if (a.search.category) b += "&category=" + a.search.category;
        c.url(b);
    };
} ]).controller("mapCtrl", [ "$scope", "locationSvr", "$modal", "$routeParams", "$log", "localStorageService", function(a, b, c, d, e, f) {
    var g = f.get("latitude");
    var h = f.get("longitude");
    a.originAddress = "";
    a.map = {};
    var i = new google.maps.Geocoder();
    a.getMap = function() {
        b.getLocation(d.restaurantId).then(function(b) {
            a.map = {
                center: {
                    latitude: b.lat,
                    longitude: b.long
                },
                zoom: 17,
                formattedAddress: b.formatted_address,
                control: {}
            };
            a.options = {
                scrollwheel: false
            };
            a.coordsUpdates = 0;
            a.dynamicMoveCtr = 0;
            a.marker = {
                id: 0,
                coords: {
                    latitude: a.map.center.latitude,
                    longitude: a.map.center.longitude
                }
            };
            a.$watchCollection("marker.coords", function(b, c) {
                if (_.isEqual(b, c)) return;
                a.coordsUpdates++;
            });
            var c = a.directions = {
                origin: g + "," + h,
                destination: a.map.center.latitude + "," + a.map.center.longitude,
                showList: true
            };
            a.travelModes = [ {
                label: "Driving",
                value: "DRIVING"
            }, {
                label: "Walking",
                value: "WALKING"
            }, {
                label: "Bicycling",
                value: "BICYCLING"
            }, {
                label: "Transit",
                value: "TRANSIT"
            } ];
            a.travelMode = a.travelModes[0].value;
            var d = new google.maps.LatLng(g, h);
            i.geocode({
                latLng: d
            }, function(b, c) {
                if (c == google.maps.GeocoderStatus.OK) {
                    if (b[1]) {
                        a.originAddress = b[1].formatted_address;
                        a.getDirections(a.travelMode);
                    } else {
                        console.log("No location found");
                    }
                } else {
                    console.log("Geocoder failed due to: " + c);
                }
            });
        });
    };
    a.getDirections = function(b) {
        var c = new google.maps.DirectionsRenderer();
        var d = new google.maps.DirectionsService();
        var e = {
            origin: a.directions.origin,
            destination: a.directions.destination,
            travelMode: google.maps.DirectionsTravelMode[b]
        };
        d.route(e, function(b, d) {
            if (d === google.maps.DirectionsStatus.OK) {
                c.setDirections(b);
                c.setMap(a.map.control.getGMap());
                var e = document.getElementById("directionsList");
                while (e.hasChildNodes()) {
                    e.removeChild(e.firstChild);
                }
                c.setPanel(document.getElementById("directionsList"));
                a.directions.showList = true;
                a.routeMessage = "";
            } else {
                a.routeMessage = "Google route unsuccessful";
            }
        });
    };
    a.getMap();
} ]).controller("menuCtrl", [ "$scope", "$routeParams", function(a, b) {
    a.restaurantId = b.restaurantId;
    if (undefined !== a.restaurantId && a.restaurantId) {
        a.menus = [ {
            name: "Manage Photos",
            link: "#/manage/photos/" + a.restaurantId,
            icon: "i-docs"
        }, {
            name: "Dashboard",
            link: "#/dashboard/" + a.restaurantId,
            icon: "i-statistics"
        }, {
            name: "Request Change",
            link: "#/request/change/" + a.restaurantId,
            icon: "i-pencil"
        } ];
    }
} ]);

"use strict";

rxControllers.controller("detailCtrl", [ "$scope", "$timeout", "$upload", "localStorageService", "$location", "$routeParams", "restaurantSvr", "geoLocation", "reviewSvr", "overviewSvr", "locationSvr", "photoSvr", "$anchorScroll", "$modal", "$rootScope", function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var p = null;
    u();
    m();
    a.restaurantId = f.restaurantId;
    a.$watch("user", function() {
        a.isOwner = a.user && a.user.ownedRestaurants && _.contains(a.user.ownedRestaurants, parseInt(a.restaurantId));
    });
    q();
    function q() {
        a.activationForm = {};
        a.activationForm.restaurant_id = a.restaurantId;
        if (a.user) a.activationForm.user_id = a.user.id;
    }
    a.reviewListPageChanged = function() {
        var b = a.reviewListCurrentPage;
        getReviews({
            page: b
        });
    };
    a.changeLength = function(a) {
        a.textLength = 99999;
    };
    a.showPhone = function() {
        alert(a.restaurant.phone);
    };
    a.getPhotos = function() {
        l.getRestaurantPhotos(a.restaurantId).then(function(b) {
            a.photos = b.items;
        });
    };
    a.onFileSelect = function(b) {
        for (var d = 0; d < b.length; d++) {
            var e = b[d];
            a.upload = c.upload({
                url: "http://api.iresturant.com/v1/photos/upload?access-token=f899139df5e1059396431415e770c6dd",
                method: "POST",
                data: {
                    myObj: a.myModelObj,
                    restaurant_id: a.restaurantId,
                    user_id: 1
                },
                file: e,
                fileFormDataName: "data"
            }).progress(function(a) {
                console.log("percent: " + parseInt(100 * a.loaded / a.total));
            }).success(function(a, b, c, d) {
                console.log(a);
            });
        }
    };
    a.claim = function() {
        e.url(e.path() + "?request=claimRestaurant");
    };
    var p = r(f.request);
    if (typeof p !== undefined && Object.keys(p).length && a.user) {
        p = n.open({
            templateUrl: p.templateLocation,
            scope: a,
            controller: p.controller,
            windowClass: p.windowClass || ""
        });
        p.opened.then(function() {
            a.showModal = true;
            $(".overlay-main").css("display", "block");
        });
        p.result.then(function(b) {
            a.selected = b;
        }, function() {
            $(".overlay-main").css("display", "none");
        });
    }
    function r(a) {
        var b = {};
        switch (f.request) {
          case "validateRestaurant":
            b = {
                modal: "validate",
                requestParam: a,
                templateLocation: "modules/claim/views/activation-form.html",
                controller: "claimCtrl"
            };
            break;

          case "claimRestaurant":
            b = {
                modal: "claim",
                requestParam: a,
                templateLocation: "modules/claim/views/form.html",
                controller: "claimCtrl",
                windowClass: "claim-modal-window"
            };
            break;
        }
        return b;
    }
    function s() {
        var b = a.restaurantId;
        g.getRestaurant(b).then(function(b) {
            a.restaurant = b;
        });
        a.getPhotos();
        g.getOverviews(b, a).then(function(b) {
            a.stats = b;
        });
    }
    function t() {
        getGraphData(a.restaurantId);
    }
    function u() {
        a.templates = [ {
            name: "review-widget.html",
            url: "modules/partials/review-widget.html"
        } ];
        a.sidebar = "modules/partials/sidebar-detail.html";
        a.header = "modules/partials/header.html";
        a.footer = "modules/partials/footer.html";
        a.reviewBox = "modules/review/views/index.html";
    }
    if (!d.get("latitude") || !d.get("longitude")) {
        h.getLocation().then(function(a) {
            d.add("latitude", a.coords.latitude);
            d.add("longitude", a.coords.longitude);
            s();
        });
        s();
    } else {
        s();
    }
} ]);

"use strict";

rxControllers.controller("graphCtrl", [ "$scope", "restaurantSvr", "$routeParams", function(a, b, c) {
    a.restaurantId = c.restaurantId;
    a.graphDurations = [ {
        label: "Last 7 Days",
        value: "WEEKLY"
    }, {
        label: "Last Month",
        value: "MONTHLY"
    }, {
        label: "Last Year",
        value: "YEARLY"
    }, {
        label: "Overall",
        value: "OVERALL"
    }, {
        label: "Custom Period",
        value: ""
    } ];
    a.graphDuration = a.graphDurations[3];
    a.setGraphDuration = function(b) {
        if (b.value in a.graphs) {
            a.graphDuration = b;
            var c = a.graphs[b.value];
            a.flotDataset[0].data = c.percentile;
            a.flotDataset[1].data = c.trend;
            a.donutDataset = c.source;
            a.stats = c.stats;
        }
    };
    a.getGraphs = function(c) {
        var d = a.graphDurations;
        if (c) {
            d = [ c ];
        } else if (!a.dates.start.date || !a.dates.start.date) {
            return;
        } else {
            a.graphs = {};
            a.noGraphs = true;
        }
        angular.forEach(d, function(c) {
            b.getGraphs(a.restaurantId, c.value, a.dates.start.date, a.dates.end.date).then(function(b) {
                if (b.percentile && b.percentile.length) {
                    a.graphs[c.value] = b;
                    a.noGraphs = false;
                    a.setGraphDuration(a.graphDuration);
                }
            });
        });
    };
    a.donutDataset = [];
    a.flotDataset = [ {
        data: [],
        label: " Overview",
        lines: {
            show: false
        },
        splines: {
            show: true,
            tension: .4,
            lineWidth: 1,
            fill: .4
        },
        points: {
            radius: 0,
            show: true
        },
        shadowSize: 2
    }, {
        data: [],
        label: " Trend",
        dashes: {
            show: true,
            dashLength: 3,
            lineWidth: 1
        },
        points: {
            radius: 0,
            show: true
        },
        shadowSize: 2
    } ];
    a.flotOptions = {
        grid: {
            hoverable: true,
            clickable: true,
            tickColor: "#d9dee9",
            borderColor: "#d9dee9",
            borderWidth: 1,
            color: "#555"
        },
        colors: [ "#19b39b", "#2e7bad" ],
        xaxis: {
            mode: "time"
        },
        yaxis: {
            ticks: 4
        },
        tooltip: true,
        tooltipOpts: {
            content: function(a, b, c, d) {
                var e = new Date(b);
                var f = $.plot.formatDate(e, "%Y-%m-%d");
                var g = d.dataIndex - 1;
                var h = "";
                if (g >= 0) {
                    var i = d.series.data[g][1];
                    var j = c - i;
                    if (j >= .1) {
                        h = "up by " + j.toFixed(1) + "%";
                    } else if (j <= -.1) {
                        h = "down by " + (-j).toFixed(1) + "%";
                    }
                }
                return Math.round(c) + "% at " + f + " " + h;
            },
            defaultTheme: false,
            shifts: {
                x: 0,
                y: 20
            },
            lines: {
                track: true
            }
        },
        legend: {}
    };
    a.donutOptions = {
        series: {
            pie: {
                innerRadius: .35,
                radius: .65,
                show: true,
                stroke: {
                    width: 0
                },
                label: {
                    show: true,
                    threshold: .05
                }
            }
        },
        colors: [ "#65b5c2", "#4da7c1", "#3993bb", "#2e7bad", "#23649e" ],
        grid: {
            hoverable: true,
            clickable: false
        },
        tooltip: true,
        tooltipOpts: {
            content: "%s"
        }
    };
    var d = new Date();
    a.dates = {
        start: {
            date: new Date(d.getFullYear() - 1, d.getMonth(), d.getDate())
        },
        end: {
            date: d
        },
        today: d
    };
    a.openCalendar = function(b, c) {
        b.preventDefault();
        b.stopPropagation();
        a.dates.start.opened = false;
        a.dates.end.opened = false;
        a.dates[c].opened = true;
    };
    a.getGraphs();
} ]);

"use strict";

rxControllers.controller("reviewCtrl", [ "$scope", "localStorageService", "$routeParams", "reviewSvr", "$modal", "messageCenterService", "$timeout", function(a, b, c, d, e, f, g) {
    a.reviewForm = {};
    a.reviewForm.restaurant_id = c.restaurantId;
    a.percent = 0;
    a.max = 5;
    var h = null;
    a.submitReview = function() {
        if (!a.reviewForm.rating) {
            f.add("danger", "Please choose a rating.", {
                timeout: 3e3
            });
            return;
        }
        d.postRestaurantReview(a.reviewForm).then(function(a) {
            if (a.err) {
                a.data.forEach(function(a) {
                    f.add("danger", a.message, {
                        timeout: 3e3
                    });
                });
                return;
            }
            if (a.status < 400) {
                f.add("success", "Your review has been posted successfully.", {
                    timeout: 3e3
                });
                g(i, 3e3);
            } else {
                j();
            }
        });
    };
    function i() {
        h.close("");
        $(".overlay-main").css("display", "none");
        a.reviewListPageChanged(a.reviewListCurrentPage);
        j();
    }
    function j() {
        a.reviewForm = {};
        a.reviewForm.restaurant_id = c.restaurantId;
    }
    a.hoveringOver = function(b) {
        a.percent = 100 * (b / a.max);
    };
    a.addNewReview = function() {
        h = e.open({
            templateUrl: "modules/review/views/form.html",
            scope: a
        });
        h.opened.then(function() {
            a.showModal = true;
            $(".overlay-main").css("display", "block");
        });
        h.result.then(function(b) {
            a.selected = b;
        }, function() {
            $(".overlay-main").css("display", "none");
        });
    };
    a.reviewListPageChanged = function(b) {
        a.getReviews({
            page: b
        });
    };
    a.getReviews = function(b) {
        d.getRestaurantReviews(c.restaurantId, b).then(function(b) {
            a.reviews = {
                items: b.items
            };
            a.maxSize = 6;
            a.reviewListItemPerPage = 8;
            a.reviewListTotalItems = b._meta.totalCount;
            a.reviewListCurrentPage = b._meta.currentPage;
            a.numPages = b._meta.pageCount;
        });
    };
    a.getReviews();
} ]);

"use strict";

rxControllers.controller("loginCtrl", [ "$scope", "$location", "$rootScope", "loginSvr", "AuthenticationService", "messageCenterService", "localStorageService", function(a, b, c, d, e, f, g) {
    a.credentials = "";
    a.signup = {};
    a.login = function(f) {
        if (!f) return;
        d.authenticate(a.credentials).then(function(a) {
            if (a.err) {
                g.remove("token");
                g.remove("user");
                e.isLogged = 0;
                c.isLogged = false;
                delete c.user;
                return;
            }
            e.isLogged = true;
            c.isLogged = true;
            g.set("token", a.items.accessToken);
            g.set("user", {
                id: a.items.id,
                username: a.items.username,
                email: a.items.email,
                ownsRestaurants: a.items.details.owned_restaurants && a.items.details.owned_restaurants.length,
                ownedRestaurants: a.items.details.owned_restaurants || []
            });
            c.user = g.get("user");
            b.path("/index");
        });
    };
    a.signupUser = function(b) {
        if (!b) return;
        d.signup(a.signup).then(function(a) {
            if (a.err) {
                var b = h("signup", a.status);
                f.add("danger", b, {
                    timeout: 3e3
                });
                return;
            }
            f.add("success", "Thank you for registration.");
        });
    };
    function h(a, b) {
        var c = "";
        if ("signup" == a && 422 == b) {
            c = "Please provide correct information. Thank you.";
        } else {
            c = "Something went wrong ! Please try again later.";
        }
        return c;
    }
} ]);

"use strict";

rxControllers.controller("photoCtrl", [ "$scope", "$routeParams", "photoSvr", "messageCenterService", "localStorageService", "$rootScope", "$location", function(a, b, c, d, e, f, g) {
    a.restaurantId = b.restaurantId;
    a.dynamic = "";
    a.type = "";
    h();
    function h(b) {
        if (typeof b === "undefined") {
            b = {
                page: 1
            };
        }
        return c.getRestaurantPhotos(a.restaurantId, b).then(function(b) {
            a.photos = b.items;
            a.maxSize = 6;
            a.photosListItemPerPage = 8;
            a.photosListTotalItems = b._meta.totalCount;
            a.photosListCurrentPage = b._meta.currentPage;
            return true;
        });
    }
    a.photosListPageChanged = function() {
        var b = a.photosListCurrentPage;
        h({
            page: b
        });
    };
    a.deletePhoto = function(b) {
        var d = a.photos.indexOf(b);
        a.photos[d].request = true;
        c.deleteRestaurantPhotos(b).then(function(b) {
            if (d > -1) a.photos.splice(d, 1);
        });
    };
    a.$watch("restaurantPhotos", function(b) {
        a.type = "warning";
        if (b) {
            for (var d = 0; d < b.length; d++) {
                var e = b[d];
                var f = {
                    data: e,
                    restaurant_id: a.restaurantId,
                    user_id: a.user.id
                };
                c.uploadRestaurantPhoto(f).then(function(b) {
                    if (b.items.success) {
                        var c = a.photosListCurrentPage;
                        h({
                            sort: "popular",
                            page: c
                        }).then(function(b) {
                            a.dynamic = 100;
                            a.type = "success";
                        });
                    }
                }, function(b) {
                    a.type = "danger";
                });
            }
        }
    });
} ]);

"use strict";

rxControllers.controller("compareCtrl", [ "$scope", "$routeParams", "restaurantSvr", function(a, b, c) {
    if (a.user && a.user.ownedRestaurants && a.user.ownedRestaurants.length) {
        c.getRestaurants({
            "id-in": a.user.ownedRestaurants.join(),
            "per-page": 50
        }).then(function(b) {
            a.restaurants = [];
            console.log(b);
            angular.forEach(b.items, function(b) {
                a.addRestaurant(b);
            });
        });
    }
    a.removeRestaurant = function(b) {
        a.restaurants = _.without(a.restaurants, b);
        delete a.graphs[b.id];
        a.refreshGraphs(a.graphDuration);
    };
    a.graphs = {};
    a.haveGraphs = {};
    var d = new Date();
    a.dates = {
        start: {
            date: new Date(d.getFullYear() - 1, d.getMonth(), d.getDate())
        },
        end: {
            date: d
        },
        today: d
    };
    a.openCalendar = function(b, c) {
        b.preventDefault();
        b.stopPropagation();
        a.dates.start.opened = false;
        a.dates.end.opened = false;
        a.dates[c].opened = true;
    };
    a.graphDurations = [ {
        label: "Last 7 Days",
        value: "WEEKLY"
    }, {
        label: "Last Month",
        value: "MONTHLY"
    }, {
        label: "Last Year",
        value: "YEARLY"
    }, {
        label: "Overall",
        value: "OVERALL"
    }, {
        label: "Custom Period",
        value: ""
    } ];
    a.graphDuration = a.graphDurations[3];
    a.setGraphDuration = function(b) {
        a.graphDuration = b;
        if (b.value == "") {
            a.updateCustomPeriodGraphs();
        } else {
            a.refreshGraphs(b);
        }
    };
    a.refreshGraphs = function(b) {
        a.flotDataset = [];
        angular.forEach(a.graphs, function(c, d) {
            var e = c[b.value];
            if (e) {
                a.flotDataset.push({
                    data: e.trend || [],
                    label: " " + e.restaurant.name,
                    restaurantId: e.restaurant.id,
                    lines: {
                        show: false
                    },
                    splines: {
                        show: true,
                        tension: .4,
                        lineWidth: 1,
                        fill: false
                    },
                    points: {
                        radius: 0,
                        show: true
                    },
                    shadowSize: 2,
                    color: e.restaurant.color
                });
            }
        });
    };
    a.updateCustomPeriodGraphs = function() {
        angular.forEach(a.restaurants, function(b) {
            c.getGraphs(b.id, "", a.dates.start.date, a.dates.end.date).then(function(c) {
                c.restaurant = b;
                delete a.graphs[b.id][""];
                a.graphs[b.id][""] = c;
                a.refreshGraphs(a.graphDuration);
            });
        });
    };
    a.addGraph = function(b) {
        var d = a.graphDurations;
        angular.forEach(d, function(d) {
            c.getGraphs(b.id, d.value, a.dates.start.date, a.dates.end.date).then(function(c) {
                c.restaurant = b;
                if (c.percentile && c.percentile.length) {
                    a.haveGraphs[d.value] = true;
                    if (!a.graphs[b.id]) {
                        a.graphs[b.id] = {};
                    }
                    a.graphs[b.id][d.value] = c;
                    a.refreshGraphs(a.graphDuration);
                }
            });
        });
    };
    a.addItem = function(b) {
        a.addRestaurant(b.data);
    };
    a.addRestaurant = function(b) {
        if (Object.keys(b).length) {
            a.numAdded = (a.numAdded || 0) + 1;
            b.color = a.flotColors[a.numAdded % a.flotColors.length];
            a.restaurants.push(b);
            a.addGraph(b);
        }
    };
    a.setStrong = function(b, c) {
        var d = a.flotDataset;
        for (var e = 0; e < d.length; e++) {
            if (d[e].restaurantId == b.id) {
                if (c) {
                    d[e].splines.lineWidth = 3;
                    d[e].points.radius = 2;
                } else {
                    d[e].splines.lineWidth = 1;
                    d[e].points.radius = 0;
                }
                return;
            }
        }
    };
    a.flotDataset = [];
    a.flotColors = [ "#235039", "#2B4C66", "#81283C", "#733919", "#5E3B67" ];
    a.flotOptions = {
        grid: {
            hoverable: true,
            clickable: true,
            tickColor: "#d9dee9",
            borderColor: "#d9dee9",
            borderWidth: 1,
            color: "#555"
        },
        xaxis: {
            mode: "time"
        },
        yaxis: {
            ticks: 4
        },
        tooltip: true,
        tooltipOpts: {
            content: function(a, b, c, d) {
                var e = new Date(b);
                var f = $.plot.formatDate(e, "%Y-%m-%d");
                var g = d.dataIndex - 1;
                var h = "";
                if (g >= 0) {
                    var i = d.series.data[g][1];
                    var j = c - i;
                    if (j >= .1) {
                        h = "up by " + j.toFixed(1) + "%";
                    } else if (j <= -.1) {
                        h = "down by " + (-j).toFixed(1) + "%";
                    }
                }
                return Math.round(c) + "% at " + f + " " + h;
            },
            defaultTheme: false,
            shifts: {
                x: 0,
                y: 20
            },
            lines: {
                track: true
            }
        },
        legend: {
            show: true,
            noColumns: 5
        }
    };
} ]);

"use strict";

rxControllers.controller("claimCtrl", [ "$scope", "$modal", "$routeParams", "$timeout", "messageCenterService", "claimSvr", "localStorageService", function(a, b, c, d, e, f, g) {
    i();
    var h = null;
    a.claimRestaurant = function() {
        f.claimRestaurant(a.claimForm).then(function(a) {
            if (a.err && a.data) {
                a.data.forEach(function(a) {
                    e.add("danger", a.message, {
                        timeout: 3e3
                    });
                });
                return;
            } else if (a.err) {
                e.add("danger", a.message, {
                    timeout: 3e3
                });
                return;
            } else if (a.status < 400) {
                $(".overlay-main").css("display", "none");
                $(".modal-dialog").css("display", "none");
                e.add("success", "Your access code has been sent to your email. Your request-token is " + a.data.request_token);
            } else {
                i();
            }
        });
    };
    a.verifyRestaurant = function() {
        f.verifyRestaurant(a.activationForm).then(function(a) {
            if (a.err) {
                a.data.forEach(function(a) {
                    e.add("danger", a.message, {
                        timeout: 3e3
                    });
                });
                return;
            }
            if (a.status < 400) {
                e.add("success", "Congratulations! you have owned restaurant dashboard. Enjoy, exploring all new and exciting features.");
            } else {
                i();
            }
        });
    };
    function i() {
        a.claimForm = {};
        a.activationForm = {};
        a.claimForm.restaurant_id = c.restaurantId;
        a.claimForm.user_id = a.user.id;
    }
} ]);

"use strict";

rxControllers.controller("requestCtrl", [ "$scope", "$routeParams", "requestSvr", "messageCenterService", "localStorageService", function(a, b, c, d, e) {
    a.restaurantId = b.restaurantId;
    a.request = {};
    a.submitRequest = function() {
        a.request.restaurant_id = a.restaurantId;
        c.postRestaurantInfoRequest(a.request).then(function(a) {
            if (a.status < 400) {
                d.add("success", "Your request has been sent for processing.", {
                    timeout: 3e3
                });
            }
        });
        return false;
    };
} ]);

"use strict";

var directiveMod = angular.module("directive", []);

directiveMod.directive("showRating", function() {
    var a = {
        link: function b(a, c, d) {
            var e = Math.round(d.value);
            var f = 5;
            var g = "";
            for (var h = 0; h < e; h++) {
                g = g + '<span class="glyphicon glyphicon-star"></span>';
            }
            for (var h = 0; h < f - e; h++) {
                g = g + '<span class="glyphicon glyphicon-star-empty"></span>';
            }
            c.html(g);
        }
    };
    return a;
});

function merge_objects(a, b) {
    var c = {};
    for (var d in a) {
        c[d] = a[d];
    }
    for (var d in b) {
        c[d] = b[d];
    }
    return c;
}

"use strict";

angular.module("directive", [ "restaurantService" ]).directive("searchBox", [ "restaurantSvr", searchBox ]).directive("shareLinks", [ "$location", shareLinks ]);

function searchBox(a) {
    return {
        restrict: "E",
        templateUrl: "modules/partials/search-box.html",
        replace: true,
        link: function(b) {
            b.navSearch = function(c) {
                return a.findRestaurant(c).then(function(a) {
                    if (!a.length) {
                        a.push({
                            formatted: "no results found"
                        });
                    }
                    var c = {};
                    angular.forEach(b.filterOut, function(a) {
                        c[a.id] = true;
                    });
                    return a.map(function(a) {
                        if ("no results found" !== a.formatted) {
                            var b = a.formatted.split(" - ");
                            a.searchText = b[0];
                            var c = b[1].split(":");
                            a.tag = c[0];
                            a.tagValue = c[1];
                        }
                        return a;
                    }).filter(function(a) {
                        return !c[a.data.id];
                    });
                });
            };
        },
        scope: {
            setRestaurant: "&",
            placeholder: "@",
            filterOut: "="
        }
    };
}

function shareLinks(a) {
    return {
        link: function(b, c, d) {
            var e, f = [ "twitter", "facebook", "linkedin", "google-plus" ], g, h = d.shareLinks.toLowerCase().split(","), i = encodeURIComponent(a.absUrl()), j = d.shareTitle, k = encodeURIComponent(j), l = [];
            angular.forEach(h, function(a) {
                a = a.trim();
                switch (a) {
                  case "twitter":
                    g = "http://twitter.com/intent/tweet?text=" + k + "%20" + i;
                    break;

                  case "facebook":
                    g = "http://facebook.com/sharer.php?u=" + i;
                    break;

                  case "linkedin":
                    g = "http://www.linkedin.com/shareArticle?mini=true&url=" + i + "&title=" + k;
                    break;

                  case "google-plus":
                    g = "https://plus.google.com/share?url=" + i;
                    break;
                }
                if (f.indexOf(a) > -1) {
                    l.push({
                        network: a,
                        url: g
                    });
                }
            });
            for (e = 0; e < l.length; e++) {
                var m = "";
                m += '<a href="' + l[e].url + '" target="_blank"';
                m += 'class="share-button"';
                m += '><img width="36" height="36" src="images/social/' + l[e].network + '.png"></a>';
                c.append(m);
            }
        }
    };
}

"use strict";

var claimService = angular.module("claimService", []);

claimService.factory("claimSvr", [ "Restangular", function(a) {
    return {
        claimRestaurant: function(b) {
            var c = a.all("claims");
            var d = $.param(b);
            return c.post(d, {}, {
                "Content-Type": "application/x-www-form-urlencoded"
            }).then(function(a) {
                return a;
            }, function(a) {
                a.err = true;
                return a;
            });
        },
        verifyRestaurant: function(b) {
            var c = a.all("claims/verify");
            var d = {
                "request-token": b.request_token,
                "validation-key": b.validation_key
            };
            var e = $.param(d);
            return c.post(e, {}, {
                "Content-Type": "application/x-www-form-urlencoded"
            }).then(function(a) {
                return a;
            }, function(a) {
                a.err = true;
                return a;
            });
        }
    };
} ]);

"use strict";

var restaurantService = angular.module("restaurantService", []);

restaurantService.factory("restaurantSvr", [ "localStorageService", "Restangular", function(a, b) {
    return {
        getRestaurants: function(c) {
            var d = b.all("restaurants/list");
            var e = this;
            return d.getList(merge_objects({
                expand: "restaurantPhotos",
                latitude: a.get("latitude"),
                longitude: a.get("longitude"),
                page: 0
            }, c)).then(function(a) {
                var b = a.data[0].items;
                for (var c = 0; c < b.length; c++) {
                    var d = "";
                    for (var e = 0; e <= b[c].price_range; e++) {
                        d = d + "$";
                    }
                    b[c].price_range_symbol = d;
                    var f = JSON.parse(b[c].overview__trend_series);
                    var g = [];
                    var h = [];
                    var i = 0;
                    var j = 0;
                    for (var k in f) {
                        var l = f[k];
                        for (var m in l) {
                            i = i + l[m];
                            j++;
                        }
                    }
                    var n = i / j;
                    for (var k in f) {
                        var l = f[k];
                        for (var m in l) {
                            g.push([ m, n - l[m] ]);
                            h.push([ m, b[c].overview__percentile - l[m] ]);
                        }
                    }
                    var o = g.length;
                    for (var p = 0; p < 12 - o; p++) {
                        g.unshift([ p, 0 ]);
                    }
                    b[c].trend_data = [ {
                        key: "Trend",
                        bar: true,
                        values: g
                    }, {
                        key: "Percentile",
                        values: h
                    } ];
                    b[c].rating = Math.round(b[c].overview__percentile / 2) / 10;
                    b[c].rating_rounded = Math.round(b[c].overview__percentile / 20);
                    b[c].trend_change = 0;
                    if (g && g.length > 1) {
                        b[c].trend_change = g[g.length - 1][1] - g[g.length - 2][1];
                    }
                    b[c].trend_change_color = "#bbb";
                    if (b[c].trend_change > 1) {
                        b[c].trend_change_color = "#99ff99";
                    } else if (b[c].trend_change < -1) {
                        b[c].trend_change_color = "#ff9977";
                    }
                }
                return {
                    items: b,
                    _meta: a.data[0]._meta
                };
            });
        },
        getRestaurant: function(a) {
            var c = "restaurants/" + a;
            var d = b.one(c);
            return d.get().then(function(a) {
                var b = a.data;
                var c = "";
                for (var d = 0; d <= b.price_range; d++) {
                    c = c + "$";
                }
                b.price_range_symbol = c;
                return b;
            });
        },
        getPhotos: function(a) {
            var c = "restaurants/" + a + "/photos";
            var d = b.all(c);
            return d.getList().then(function(a) {
                return a.data[0].items;
            });
        },
        getOverviews: function(a) {
            var c = "restaurants/" + a + "/stats";
            var d = b.one(c);
            return d.get().then(function(a) {
                return a.data.items;
            });
        },
        getGraphs: function(a, c, d, e) {
            var f = "restaurants/" + a + "/graphs";
            var g = b.one(f);
            var h = {};
            if (c) {
                h.duration = c;
            } else {
                h.start = d.toISOString().substring(0, 10);
                h.end = e.toISOString().substring(0, 10);
            }
            h.type = "PERCENTILE-TREND-AND-SOURCE";
            return g.get(h).then(function(a) {
                var b = [];
                var c = [];
                var d = [];
                angular.forEach(a.data.source, function(a, c) {
                    if (a && parseInt(a) > 0) {
                        b.push({
                            label: c,
                            data: parseInt(a)
                        });
                    }
                });
                angular.forEach(a.data.data, function(a, b) {
                    c.push([ parseInt(b), a.percentile ]);
                });
                angular.forEach(a.data.data, function(a, b) {
                    d.push([ parseInt(b), a.trend ]);
                });
                return {
                    percentile: c,
                    trend: d,
                    source: b,
                    stats: a.data.stats
                };
            });
        },
        getRestaurantCategories: function() {
            var a = "restaurants/category";
            var c = b.all(a);
            return c.getList().then(function(a) {
                return a.data[0].items;
            });
        },
        getRestaurantLocations: function(a) {
            var c = "restaurants/location";
            var d = b.all(c);
            return d.getList({
                search: a
            }).then(function(a) {
                return a.data[0].items;
            });
        },
        findRestaurant: function(a) {
            var c = "restaurants/find";
            var d = b.all(c);
            return d.getList({
                search: a
            }).then(function(a) {
                return a.data[0].items;
            });
        }
    };
} ]);

"use strict";

var reviewService = angular.module("reviewService", []);

reviewService.factory("reviewSvr", [ "localStorageService", "Restangular", function(a, b) {
    return {
        getRestaurantReviews: function(a, c) {
            var d = b.all("restaurants/" + a + "/reviews");
            return d.withHttpConfig({
                cache: false
            }).getList(c).then(function(a) {
                console.log("reviewService line no 16 :: reviewService sending reviews");
                return {
                    items: a.data[0].items,
                    _meta: a.data[0]._meta
                };
            });
        },
        postRestaurantReview: function(a) {
            var c = b.all("reviews");
            var d = $.param(a);
            return c.post(d, {}, {
                "Content-Type": "application/x-www-form-urlencoded"
            }).then(function(a) {
                return a;
            }, function(a) {
                a.err = true;
                return a;
            });
        }
    };
} ]);

"use strict";

var overviewService = angular.module("overviewService", []);

overviewService.factory("overviewSvr", [ "localStorageService", "Restangular", function(a, b) {
    return {
        getGraph: function(a) {
            var c = "overviews/" + a + "/graph";
            var d = b.all(c);
            return d.getList().then(function(a) {
                a = a.data[0].items;
                var b;
                b = [];
                for (var c = 0; c < a.length; c++) {
                    b[c] = a[c].percentile;
                }
                return b;
            });
        }
    };
} ]);

"use strict";

var locationService = angular.module("locationService", []);

locationService.factory("locationSvr", [ "localStorageService", "Restangular", function(a, b) {
    return {
        getLocation: function(a) {
            var c = b.one("restaurants/" + a);
            return c.get({
                expand: "locations"
            }).then(function(a) {
                return a.data.locations[0];
            });
        }
    };
} ]);

"use strict";

var photoService = angular.module("photoService", []);

photoService.factory("photoSvr", [ "localStorageService", "Restangular", "$http", function(a, b, c) {
    return {
        getRestaurantPhotos: function(a, c) {
            var d = "restaurants/" + a + "/photos";
            var e = b.all(d);
            return e.getList(c).then(function(a) {
                return {
                    items: a.data[0].items,
                    _meta: a.data[0]._meta
                };
            });
        },
        deleteRestaurantPhotos: function(a) {
            var c = a.id;
            var d = b.all("photos/" + c);
            return d.remove().then(function(a) {
                return a;
            });
        },
        uploadRestaurantPhoto: function(a) {
            var c = "photos/upload";
            var d = new FormData();
            angular.forEach(a, function(a, b) {
                d.append(b, a);
            });
            return b.one(c).withHttpConfig({
                transformRequest: angular.identity
            }).customPOST(d, "", undefined, {
                "Content-Type": undefined
            }).then(function(a) {
                return {
                    items: a.data
                };
            });
        }
    };
} ]);

"use strict";

var loginService = angular.module("Services", []);

loginService.factory("loginSvr", [ "Restangular", function(a) {
    return {
        authenticate: function(b) {
            if (!b || undefined == b) b = {};
            var c = a.all("authentications/login");
            b.encrypted = false;
            var d = $.param(b);
            return c.post(d, null, {
                "Content-Type": "application/x-www-form-urlencoded"
            }).then(function(a) {
                return {
                    items: a.data.items[0],
                    meta: a.data._meta
                };
            }, function(a) {
                return {
                    err: 1,
                    status: a.status,
                    statusText: a.statusText
                };
            });
        },
        signup: function(b) {
            if (!b || undefined == b) b = {};
            var c = a.all("authentications/register");
            var d = $.param(b);
            return c.post(d, null, {
                "Content-Type": "application/x-www-form-urlencoded"
            }).then(function(a) {
                return {
                    status: a.status
                };
            }, function(a) {
                return {
                    err: 1,
                    status: a.status,
                    statusText: a.statusText
                };
            });
        }
    };
} ]);

"use strict";

var requestService = angular.module("requestService", []);

requestService.factory("requestSvr", [ "localStorageService", "Restangular", function(a, b) {
    return {
        postRestaurantInfoRequest: function(a) {
            var c = b.all("requests");
            var d = $.param(a);
            return c.post(d, {}, {
                "Content-Type": "application/x-www-form-urlencoded"
            }).then(function(a) {
                return a;
            }, function(a) {
                a.err = true;
                return a;
            });
        }
    };
} ]);

+function(a) {
    "use strict";
    a(function() {
        a(".datepicker-input").each(function() {
            a(this).datepicker();
        });
        a(".dropfile").each(function() {
            var b = a(this);
            if (typeof window.FileReader === "undefined") {
                a("small", this).html("File API & FileReader API not supported").addClass("text-danger");
                return;
            }
            this.ondragover = function() {
                b.addClass("hover");
                return false;
            };
            this.ondragend = function() {
                b.removeClass("hover");
                return false;
            };
            this.ondrop = function(c) {
                c.preventDefault();
                b.removeClass("hover").html("");
                var d = c.dataTransfer.files[0], e = new FileReader();
                e.onload = function(c) {
                    b.append(a("<img>").attr("src", c.target.result));
                };
                e.readAsDataURL(d);
                return false;
            };
        });
        a(".slider").each(function() {
            a(this).slider();
        });
        if (a.fn.sortable) {
            a(".sortable").sortable();
        }
        a(".no-touch .slim-scroll").each(function() {
            var b = a(this), c = b.data(), d;
            b.slimScroll(c);
            a(window).resize(function(a) {
                clearTimeout(d);
                d = setTimeout(function() {
                    b.slimScroll(c);
                }, 500);
            });
            a(document).on("updateNav", function() {
                b.slimScroll(c);
            });
        });
        a(".portlet").each(function() {
            a(".portlet").sortable({
                connectWith: ".portlet",
                iframeFix: false,
                items: ".portlet-item",
                opacity: .8,
                helper: "original",
                revert: true,
                forceHelperSize: true,
                placeholder: "sortable-box-placeholder round-all",
                forcePlaceholderSize: true,
                tolerance: "pointer"
            });
        });
        a("#docs pre code").each(function() {
            var b = a(this);
            var c = b.html();
            b.html(c.replace(/</g, "&lt;").replace(/>/g, "&gt;"));
        });
        a(document).on("change", 'table thead [type="checkbox"]', function(b) {
            b && b.preventDefault();
            var c = a(b.target).closest("table"), d = a(b.target).is(":checked");
            a('tbody [type="checkbox"]', c).prop("checked", d);
        });
        function b(b) {
            var c = a(".nav-user"), d = a(".count:first", c), e = parseInt(d.text());
            a(".count", c).fadeOut().fadeIn().text(e + 1);
            a(b).hide().prependTo(c.find(".list-group")).slideDown().css("display", "block");
        }
        var c = '<a href="#" class="media list-group-item">' + '<span class="pull-left thumb-sm text-center">' + '<i class="fa fa-envelope-o fa-2x text-success"></i>' + "</span>" + '<span class="media-body block m-b-none">' + "Sophi sent you a email<br>" + '<small class="text-muted">1 minutes ago</small>' + "</span>" + "</a>";
        setTimeout(function() {
            b(c);
        }, 1500);
        a(".chosen-select").length && a(".chosen-select").chosen();
    });
}(window.jQuery);

(function(a, b, c) {
    var d = "placeholder" in b.createElement("input");
    var e = "placeholder" in b.createElement("textarea");
    var f = c.fn;
    var g = c.valHooks;
    var h = c.propHooks;
    var i;
    var j;
    if (d && e) {
        j = f.placeholder = function() {
            return this;
        };
        j.input = j.textarea = true;
    } else {
        j = f.placeholder = function() {
            var a = this;
            a.filter((d ? "textarea" : ":input") + "[placeholder]").not(".placeholder").bind({
                "focus.placeholder": l,
                "blur.placeholder": m
            }).data("placeholder-enabled", true).trigger("blur.placeholder");
            return a;
        };
        j.input = d;
        j.textarea = e;
        i = {
            get: function(a) {
                var b = c(a);
                var d = b.data("placeholder-password");
                if (d) {
                    return d[0].value;
                }
                return b.data("placeholder-enabled") && b.hasClass("placeholder") ? "" : a.value;
            },
            set: function(a, d) {
                var e = c(a);
                var f = e.data("placeholder-password");
                if (f) {
                    return f[0].value = d;
                }
                if (!e.data("placeholder-enabled")) {
                    return a.value = d;
                }
                if (d == "") {
                    a.value = d;
                    if (a != b.activeElement) {
                        m.call(a);
                    }
                } else {
                    if (e.hasClass("placeholder")) {
                        l.call(a, true, d) || (a.value = d);
                    } else {
                        a.value = d;
                    }
                }
                return e;
            }
        };
        if (!d) {
            g.input = i;
            h.value = i;
        }
        if (!e) {
            g.textarea = i;
            h.value = i;
        }
        c(function() {
            c(b).delegate("form", "submit.placeholder", function() {
                var a = c(".placeholder", this).each(l);
                setTimeout(function() {
                    a.each(m);
                }, 10);
            });
        });
        c(a).bind("beforeunload.placeholder", function() {
            c(".placeholder").each(function() {
                this.value = "";
            });
        });
    }
    function k(a) {
        var b = {};
        var d = /^jQuery\d+$/;
        c.each(a.attributes, function(a, c) {
            if (c.specified && !d.test(c.name)) {
                b[c.name] = c.value;
            }
        });
        return b;
    }
    function l(a, d) {
        var e = this;
        var f = c(e);
        if (e.value == f.attr("placeholder") && f.hasClass("placeholder")) {
            if (f.data("placeholder-password")) {
                f = f.hide().next().show().attr("id", f.removeAttr("id").data("placeholder-id"));
                if (a === true) {
                    return f[0].value = d;
                }
                f.focus();
            } else {
                e.value = "";
                f.removeClass("placeholder");
                e == b.activeElement && e.select();
            }
        }
    }
    function m() {
        var a;
        var b = this;
        var d = c(b);
        var e = this.id;
        if (b.value == "") {
            if (b.type == "password") {
                if (!d.data("placeholder-textinput")) {
                    try {
                        a = d.clone().attr({
                            type: "text"
                        });
                    } catch (f) {
                        a = c("<input>").attr(c.extend(k(this), {
                            type: "text"
                        }));
                    }
                    a.removeAttr("name").data({
                        "placeholder-password": d,
                        "placeholder-id": e
                    }).bind("focus.placeholder", l);
                    d.data({
                        "placeholder-textinput": a,
                        "placeholder-id": e
                    }).before(a);
                }
                d = d.removeAttr("id").hide().prev().attr("id", e).show();
            }
            d.addClass("placeholder");
            d[0].value = d.attr("placeholder");
        } else {
            d.removeClass("placeholder");
        }
    }
})(this, document, jQuery);

window.Modernizr = function(a, b, c) {
    function d(a) {
        o.cssText = a;
    }
    function e(a, b) {
        return d(r.join(a + ";") + (b || ""));
    }
    function f(a, b) {
        return typeof a === b;
    }
    function g(a, b) {
        return !!~("" + a).indexOf(b);
    }
    function h(a, b, d) {
        for (var e in a) {
            var g = b[a[e]];
            if (g !== c) return d === !1 ? a[e] : f(g, "function") ? g.bind(d || b) : g;
        }
        return !1;
    }
    var i = "2.6.2", j = {}, k = !0, l = b.documentElement, m = "modernizr", n = b.createElement(m), o = n.style, p, q = {}.toString, r = " -webkit- -moz- -o- -ms- ".split(" "), s = {}, t = {}, u = {}, v = [], w = v.slice, x, y = function(a, c, d, e) {
        var f, g, h, i, j = b.createElement("div"), k = b.body, n = k || b.createElement("body");
        if (parseInt(d, 10)) while (d--) h = b.createElement("div"), h.id = e ? e[d] : m + (d + 1), 
        j.appendChild(h);
        return f = [ "&#173;", '<style id="s', m, '">', a, "</style>" ].join(""), j.id = m, 
        (k ? j : n).innerHTML += f, n.appendChild(j), k || (n.style.background = "", n.style.overflow = "hidden", 
        i = l.style.overflow, l.style.overflow = "hidden", l.appendChild(n)), g = c(j, a), 
        k ? j.parentNode.removeChild(j) : (n.parentNode.removeChild(n), l.style.overflow = i), 
        !!g;
    }, z = {}.hasOwnProperty, A;
    !f(z, "undefined") && !f(z.call, "undefined") ? A = function(a, b) {
        return z.call(a, b);
    } : A = function(a, b) {
        return b in a && f(a.constructor.prototype[b], "undefined");
    }, Function.prototype.bind || (Function.prototype.bind = function(a) {
        var b = this;
        if (typeof b != "function") throw new TypeError();
        var c = w.call(arguments, 1), d = function() {
            if (this instanceof d) {
                var e = function() {};
                e.prototype = b.prototype;
                var f = new e(), g = b.apply(f, c.concat(w.call(arguments)));
                return Object(g) === g ? g : f;
            }
            return b.apply(a, c.concat(w.call(arguments)));
        };
        return d;
    }), s.touch = function() {
        var c;
        return "ontouchstart" in a || a.DocumentTouch && b instanceof DocumentTouch ? c = !0 : y([ "@media (", r.join("touch-enabled),("), m, ")", "{#modernizr{top:9px;position:absolute}}" ].join(""), function(a) {
            c = a.offsetTop === 9;
        }), c;
    };
    for (var B in s) A(s, B) && (x = B.toLowerCase(), j[x] = s[B](), v.push((j[x] ? "" : "no-") + x));
    return j.addTest = function(a, b) {
        if (typeof a == "object") for (var d in a) A(a, d) && j.addTest(d, a[d]); else {
            a = a.toLowerCase();
            if (j[a] !== c) return j;
            b = typeof b == "function" ? b() : b, typeof k != "undefined" && k && (l.className += " " + (b ? "" : "no-") + a), 
            j[a] = b;
        }
        return j;
    }, d(""), n = p = null, j._version = i, j._prefixes = r, j.testStyles = y, l.className = l.className.replace(/(^|\s)no-js(\s|$)/, "$1$2") + (k ? " js " + v.join(" ") : ""), 
    j;
}(this, this.document);

Modernizr.addTest("android", function() {
    return !!navigator.userAgent.match(/Android/i);
});

Modernizr.addTest("chrome", function() {
    return !!navigator.userAgent.match(/Chrome/i);
});

Modernizr.addTest("firefox", function() {
    return !!navigator.userAgent.match(/Firefox/i);
});

Modernizr.addTest("iemobile", function() {
    return !!navigator.userAgent.match(/IEMobile/i);
});

Modernizr.addTest("ie", function() {
    return !!navigator.userAgent.match(/MSIE/i);
});

Modernizr.addTest("ie8", function() {
    return !!navigator.userAgent.match(/MSIE 8/i);
});

Modernizr.addTest("ie10", function() {
    return !!navigator.userAgent.match(/MSIE 10/i);
});

Modernizr.addTest("ie11", function() {
    return !!navigator.userAgent.match(/Trident.*rv:11\./);
});

Modernizr.addTest("ios", function() {
    return !!navigator.userAgent.match(/iPhone|iPad|iPod/i);
});

(function(a, b) {
    "use strict";
    var c = "undefined" != typeof Element && "ALLOW_KEYBOARD_INPUT" in Element, d = function() {
        for (var a, c, d = [ [ "requestFullscreen", "exitFullscreen", "fullscreenElement", "fullscreenEnabled", "fullscreenchange", "fullscreenerror" ], [ "webkitRequestFullscreen", "webkitExitFullscreen", "webkitFullscreenElement", "webkitFullscreenEnabled", "webkitfullscreenchange", "webkitfullscreenerror" ], [ "webkitRequestFullScreen", "webkitCancelFullScreen", "webkitCurrentFullScreenElement", "webkitCancelFullScreen", "webkitfullscreenchange", "webkitfullscreenerror" ], [ "mozRequestFullScreen", "mozCancelFullScreen", "mozFullScreenElement", "mozFullScreenEnabled", "mozfullscreenchange", "mozfullscreenerror" ] ], e = 0, f = d.length, g = {}; f > e; e++) if (a = d[e], 
        a && a[1] in b) {
            for (e = 0, c = a.length; c > e; e++) g[d[0][e]] = a[e];
            return g;
        }
        return !1;
    }(), e = {
        request: function(a) {
            var e = d.requestFullscreen;
            a = a || b.documentElement, /5\.1[\.\d]* Safari/.test(navigator.userAgent) ? a[e]() : a[e](c && Element.ALLOW_KEYBOARD_INPUT);
        },
        exit: function() {
            b[d.exitFullscreen]();
        },
        toggle: function(a) {
            this.isFullscreen ? this.exit() : this.request(a);
        },
        onchange: function() {},
        onerror: function() {},
        raw: d
    };
    return d ? (Object.defineProperties(e, {
        isFullscreen: {
            get: function() {
                return !!b[d.fullscreenElement];
            }
        },
        element: {
            enumerable: !0,
            get: function() {
                return b[d.fullscreenElement];
            }
        },
        enabled: {
            enumerable: !0,
            get: function() {
                return !!b[d.fullscreenEnabled];
            }
        }
    }), b.addEventListener(d.fullscreenchange, function(a) {
        e.onchange.call(e, a);
    }), b.addEventListener(d.fullscreenerror, function(a) {
        e.onerror.call(e, a);
    }), a.screenfull = e, void 0) : a.screenfull = !1;
})(window, document);

+function(a) {
    "use strict";
    var b = function(b) {
        this.$element = a(b);
        this.$prev = this.$element.prev();
        !this.$prev.length && (this.$parent = this.$element.parent());
    };
    b.prototype = {
        constructor: b,
        init: function() {
            var a = this.$element, b = a.data()["toggle"].split(":")[1], c = a.data("target");
            a.hasClass("in") || a[b](c).addClass("in");
        },
        reset: function() {
            this.$parent && this.$parent["prepend"](this.$element);
            !this.$parent && this.$element["insertAfter"](this.$prev);
            this.$element.removeClass("in");
        }
    };
    a.fn.shift = function(c) {
        return this.each(function() {
            var d = a(this), e = d.data("shift");
            if (!e) d.data("shift", e = new b(this));
            if (typeof c == "string") e[c]();
        });
    };
    a.fn.shift.Constructor = b;
}(jQuery);

+function(a) {
    "use strict";
    var b = function(b, c) {
        this.options = c;
        this.$element = a(b);
        this.start();
    };
    b.DEFAULTS = {
        backdrop: true,
        url: ""
    };
    b.prototype.start = function() {
        var b = this;
        this.backdrop();
        a.ajax(this.options.url).done(function(a) {
            b.$content = a;
            b.complete();
        });
    };
    b.prototype.complete = function() {
        var a = this;
        try {
            window.history.pushState({}, "", this.options.url);
        } catch (b) {
            window.location.replace(this.options.url);
        }
        this.updateBar(100);
    };
    b.prototype.backdrop = function() {
        this.$element.css("position", "relative");
        this.$backdrop = a('<div class="backdrop fade"></div>').appendTo(this.$element);
        this.$backdrop[0].offsetWidth;
        this.$backdrop.addClass("in");
        this.$bar = a('<div class="bar b-t b-info"></div>').width(0).appendTo(this.$backdrop);
    };
    b.prototype.update = function() {
        !this.$element.is("html") && this.$element.html(this.$content);
        if (this.$element.is("html")) {
            document.open();
            document.write(this.$content);
            document.close();
        }
    };
    b.prototype.updateBar = function(a) {
        var b = this;
        this.$bar.stop().animate({
            width: a + "%"
        }, 500, "linear", function() {
            if (a == 100) b.update();
        });
    };
    b.prototype.enable = function(a) {
        var b = a.currentTarget;
        if (location.protocol !== b.protocol || location.hostname !== b.hostname) return false;
        if (b.hash && b.href.replace(b.hash, "") === location.href.replace(location.hash, "")) return false;
        if (b.href === location.href + "#" || b.href === location.href) return false;
        return true;
    };
    a.fn.bjax = function(c) {
        return this.each(function() {
            var d = a(this);
            var e = d.data("app.bjax");
            var f = a.extend({}, b.DEFAULTS, d.data(), typeof c == "object" && c);
            if (!e) d.data("app.bjax", e = new b(this, f));
            if (typeof c == "string") e[c]();
        });
    };
    a.fn.bjax.Constructor = b;
    a(window).on("popstate", function(a) {
        if (a.originalEvent.state !== null) {
            window.location.reload(true);
        }
        a.preventDefault();
    });
    a(document).on("click.app.bjax.data-api", "[data-bjax], .nav-primary a", function(c) {
        if (!b.prototype.enable(c)) return;
        var d = a(this);
        var e = d.attr("href");
        var f = a(d.attr("data-target") || "html");
        var g = a.extend({
            url: e
        }, f.data(), d.data());
        f.bjax(g);
        c.preventDefault();
    });
}(jQuery);

Date.now = Date.now || function() {
    return +new Date();
};

+function(a) {
    a(function() {
        a(document).on("click", "[data-toggle=fullscreen]", function(a) {
            a.preventDefault();
            if (screenfull.enabled) {
                screenfull.request();
            }
        });
        a("input[placeholder], textarea[placeholder]").placeholder();
        a("[data-toggle=popover]").popover();
        a(document).on("click", ".popover-title .close", function(b) {
            var c = a(b.target), d = c.closest(".popover").prev();
            d && d.popover("hide");
        });
        a(document).on("click", '[data-toggle="ajaxModal"]', function(b) {
            a("#ajaxModal").remove();
            b.preventDefault();
            var c = a(this), d = c.data("remote") || c.attr("href"), e = a('<div class="modal fade" id="ajaxModal"><div class="modal-body"></div></div>');
            a("body").append(e);
            e.modal();
            e.load(d);
        });
        a.fn.dropdown.Constructor.prototype.change = function(b) {
            b.preventDefault();
            var c = a(b.target), d, e = false, f, g;
            !c.is("a") && (c = c.closest("a"));
            f = c.closest(".dropdown-menu");
            g = f.parent().find(".dropdown-label");
            $labelHolder = g.text();
            d = c.find("input");
            e = d.is(":checked");
            if (d.is(":disabled")) return;
            if (d.attr("type") == "radio" && e) return;
            if (d.attr("type") == "radio") f.find("li").removeClass("active");
            c.parent().removeClass("active");
            !e && c.parent().addClass("active");
            d.prop("checked", !d.prop("checked"));
            $items = f.find("li > a > input:checked");
            if ($items.length) {
                $text = [];
                $items.each(function() {
                    var b = a(this).parent().text();
                    b && $text.push(a.trim(b));
                });
                $text = $text.length < 4 ? $text.join(", ") : $text.length + " selected";
                g.html($text);
            } else {
                g.html(g.data("placeholder"));
            }
        };
        a(document).on("click.dropdown-menu", ".dropdown-select > li > a", a.fn.dropdown.Constructor.prototype.change);
        a("[data-toggle=tooltip]").tooltip();
        a(document).on("click", '[data-toggle^="class"]', function(b) {
            b && b.preventDefault();
            var c = a(b.target), d, e, f, g, h;
            !c.data("toggle") && (c = c.closest('[data-toggle^="class"]'));
            d = c.data()["toggle"];
            e = c.data("target") || c.attr("href");
            d && (f = d.split(":")[1]) && (g = f.split(","));
            e && (h = e.split(","));
            g && g.length && a.each(h, function(b, d) {
                if (g[b].indexOf("*") !== -1) {
                    var e = new RegExp("\\s" + g[b].replace(/\*/g, "[A-Za-z0-9-_]+").split(" ").join("\\s|\\s") + "\\s", "g");
                    a(c).each(function(b, c) {
                        var d = " " + c.className + " ";
                        while (e.test(d)) {
                            d = d.replace(e, " ");
                        }
                        c.className = a.trim(d);
                    });
                }
                h[b] != "#" && a(h[b]).toggleClass(g[b]) || c.toggleClass(g[b]);
            });
            c.toggleClass("active");
        });
        a(document).on("click", ".panel-toggle", function(b) {
            b && b.preventDefault();
            var c = a(b.target), d = "collapse", e;
            if (!c.is("a")) c = c.closest("a");
            e = c.closest(".panel");
            e.find(".panel-body").toggleClass(d);
            c.toggleClass("active");
        });
        a(".carousel.auto").carousel();
        a(document).on("click.button.data-api", "[data-loading-text]", function(b) {
            var c = a(b.target);
            c.is("i") && (c = c.parent());
            c.button("loading");
        });
        var b = a(window);
        var c = function(b) {
            if (b == "reset") {
                a('[data-toggle^="shift"]').shift("reset");
                return true;
            }
            a('[data-toggle^="shift"]').shift("init");
            return true;
        };
        b.width() < 768 && c();
        var d;
        b.resize(function() {
            clearTimeout(d);
            d = setTimeout(function() {
                e();
                b.width() < 767 && c();
                b.width() >= 768 && c("reset") && f();
            }, 500);
        });
        var e = function() {
            a(".app-fluid #nav > *").css("min-height", a(window).height() - 60);
            return true;
        };
        e();
        var f = function() {
            a(".ie11 .vbox").each(function() {
                a(this).height(a(this).parent().height());
            });
            return true;
        };
        f();
        a(document).on("click", '[data-ride="collapse"] a', function(b) {
            var c = a(b.target), d;
            c.is("a") || (c = c.closest("a"));
            d = c.parent().siblings(".active");
            d && d.toggleClass("active").find("> ul:visible").slideUp(200);
            c.parent().hasClass("active") && c.next().slideUp(200) || c.next().slideDown(200);
            c.parent().toggleClass("active");
            c.next().is("ul") && b.preventDefault();
            setTimeout(function() {
                a(document).trigger("updateNav");
            }, 300);
        });
        a(document).on("click.bs.dropdown.data-api", ".dropdown .on, .dropup .on, .open .on", function(a) {
            a.stopPropagation();
        });
    });
}(jQuery);

"use strict";

var myApp = angular.module("myApp", [ "ngRoute", "config", "LocalStorageModule", "directive", "restangular", "geoLocation", "overviewService", "restaurantService", "reviewService", "locationService", "photoService", "requestService", "claimService", "GoogleMaps", "angularFileUpload", "ui.bootstrap", "nvd3ChartDirectives", "easypiechart", "highcharts-ng", "angular-flot", "Controllers", "Services", "MessageCenterModule", "angularFileUpload", "uiGmapgoogle-maps", "cgBusy" ]);

myApp.config([ "$routeProvider", function(a) {
    a.otherwise({
        redirectTo: "/index"
    });
} ]);

myApp.config([ "uiGmapGoogleMapApiProvider", function(a) {
    a.configure({
        v: "3.17",
        libraries: "weather,geometry,visualization"
    });
} ]);

myApp.config([ "RestangularProvider", function(a) {
    a.setRestangularFields({
        id: "id"
    });
    a.setBaseUrl("http://api.reviews-combined.com:80/v1/");
    a.setDefaultRequestParams({
        "access-token": "f899139df5e1059396431415e770c6dd",
        "per-page": 8
    });
    a.setDefaultHttpFields({
        withCredentials: false,
        cache: true
    });
    a.setFullResponse(true);
    a.setRequestInterceptor(function(a, b) {
        if (b === "remove") {
            return null;
        }
        return a;
    });
    a.addResponseInterceptor(function(a, b, c, d, e, f) {
        if (b === "getList") {
            a = [ {
                items: a.items,
                _meta: a._meta
            } ];
        }
        return a;
    });
} ]);

myApp.factory("AuthenticationService", function() {
    var a = {
        isLogged: false
    };
    return a;
});

myApp.run([ "$rootScope", "$location", "localStorageService", "AuthenticationService", function(a, b, c, d) {
    a.$on("$routeChangeStart", function(a, e, f) {
        if (e != null && e.access != null && e.access.requiredLogin && !d.isLogged && !c.get("token")) {
            d.isLogged = 0;
            b.path("/login");
        }
    });
    a.clearToken = function() {
        c.remove("token");
        c.remove("user");
        a.isLogged = false;
        delete a.user;
        b.path("/index");
    };
    a.user = c.get("user");
} ]);

myApp.config([ "$httpProvider", "RestangularProvider", function(a, b) {
    a.defaults.useXDomain = true;
    delete a.defaults.headers.common["X-Requested-With"];
    var c = [ "$q", "$location", "$injector", "$rootScope", "localStorageService", "AuthenticationService", "messageCenterService", function(a, c, e, f, g, h, i) {
        return {
            request: function(a) {
                a.headers = a.headers || {};
                var c = g.get("token");
                if (c) {
                    b.setDefaultRequestParams({
                        "access-token": c,
                        "per-page": 8
                    });
                    h.isLogged = 1;
                    f.isLogged = 1;
                }
                return a;
            },
            requestError: function(b) {
                return a.reject(b);
            },
            response: function(b) {
                return b || a.when(b);
            },
            responseError: function(b) {
                var h = e.get("AuthenticationService");
                var j = g.get("token");
                if (b != null && b.status === 401 && (j || h.isLogged)) {
                    g.remove("token");
                    h.isLogged = false;
                    f.isLogged = false;
                    c.path("/login");
                } else if (b.status === 0) {
                    f.errorStatus = "No connection. Verify application is running.";
                } else if (b.status == 401) {
                    f.errorStatus = "Unauthorized";
                } else if (b.status == 405) {
                    f.errorStatus = "HTTP verb not supported [405]";
                } else if (b.status == 422 && b.data.message) {
                    f.errorStatus = d(b.data.message);
                } else {
                    b.data.forEach(function(a) {
                        i.add("danger", d(a.message), {
                            timeout: 3e3
                        });
                    });
                    return;
                }
                if (f.errorStatus) {
                    i.add("danger", f.errorStatus, {
                        timeout: 3e3
                    });
                    return;
                }
                return a.reject(b);
            }
        };
    } ];
    a.interceptors.push(c);
    function d(a) {
        switch (a) {
          case "Invalid username":
            a = "The username you provided does not exist.";
            break;

          case "Invalid password":
            a = "Sorry ! the password did not match. Please try again.";
            break;

          default:
            a = a;
        }
        return a;
    }
} ]);