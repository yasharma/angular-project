"use strict";var directiveModule=angular.module("angular-dropdown-multiselect",[]);directiveModule.directive("ngDropdownMultiselect",["$filter","$document","$compile","$parse",function(e,t,n,s){return{restrict:"AE",scope:{selectedModel:"=",options:"=",extraSettings:"=",events:"=",searchFilter:"=?",translationTexts:"=",groupBy:"@",ngDisabled:"="},templateUrl:"src/partials/dropdown-multiselect.html",link:function(n,s,l){var i=function(){return 0===c()},o=function(e){var t=e[n.settings.displayProp],s=n.settings.smartButtonTextConverter(t,e);return s||t},c=function(){var e;return e=n.singleSelection?null!==n.selectedModel&&angular.isDefined(n.selectedModel[n.settings.idProp])?1:0:angular.isDefined(n.selectedModel)?n.selectedModel.length:0},r=function(){var e=[];return angular.forEach(n.options,function(t){n.isChecked(t[n.settings.idProp])&&e.push(o(t))}),c()>n.settings.smartButtonMaxItems&&(e=e.slice(0,n.settings.smartButtonMaxItems),e.push("...")),e.join(", ")},a=function(){var e=c(),t=[e,n.texts.dynamicButtonTextSuffix];return 0===e&&(t=[n.texts.buttonDefaultText]),t.join(" ")},d=function(e){var t={};return t[n.settings.idProp]=e,t},g=function(e,t){if(angular.isArray(e)){for(var s=0;s<e.length;s++)if(e[s][n.settings.idProp]==t[n.settings.idProp])return e[s];return null}return n.selectedModel[n.settings.idProp]==t[n.settings.idProp]?angular.copy(n.selectedModel):void 0},u=function(e,t){if(angular.isArray(e))for(var s=0;s<e.length;s++)if(e[s][n.settings.idProp]==t[n.settings.idProp])return s;return-1},p=function(e){var t=d(e),s=g(n.options,t);return angular.copy(s)},h=function(e){var t=d(e),s=!1;return s=n.singleSelection?n.selectedModel[n.settings.idProp]==e:-1!==u(n.selectedModel,t)},f=function(){return n.settings.selectionLimit>0&&c()>=n.settings.selectionLimit},m=function(e){for(var t=e.target.parentElement,s=!1;angular.isDefined(t)&&null!==t&&!s;)-1==t.className.indexOf("multiselect-parent")||s||t===n.$dropdownTrigger&&(s=!0),t=t.parentElement;s||n.$apply(function(){n.open=!1})};n.toggleDropdown=function(){n.open=!n.open},n.checkboxClick=function(e,t){n.toggleItem(t),e.stopImmediatePropagation()},n.getGroupTitle=function(e){return null!==n.settings.groupByTextProvider?n.settings.groupByTextProvider(e):e},n.getButtonText=function(){var e="";return e=n.settings.dynamicTitle&&!i()?n.settings.smartButtonMaxItems>0?r():a():n.texts.buttonDefaultText},n.selectAll=function(){n.deselectAll({sendEvent:!1}),angular.forEach(n.options,function(e){n.selectItem(e[n.settings.idProp],{sendEvent:!1})}),n.externalEvents.onSelectAll()},n.deselectAll=function(e){e=e||{},angular.isUndefined(e.sendEvent)&&(e.sendEvent=!0),n.singleSelection?n.selectedModel={}:n.selectedModel.splice(0,c()),e.sendEvent&&n.externalEvents.onDeselectAll()},n.selectItem=function(e,t){var t=t||{};angular.isUndefined(t.sendEvent)&&(t.sendEvent=!0);var s=p(e),l=function(e){t.sendEvent&&n.externalEvents.onItemSelect(e)};n.singleSelection?(n.selectedModel=s,l(s)):h(e)||f()||(n.selectedModel.push(s),l(s))},n.deselectItem=function(e){var t=p(e);n.singleSelection?n.selectedModel={}:n.selectedModel.splice(u(n.selectedModel,t),1),n.externalEvents.onItemDeselect(t)},n.toggleItem=function(e){h(e)?n.deselectItem(e):n.selectItem(e)},n.isChecked=function(e){return n.singleSelection?null!==n.selectedModel&&angular.isDefined(n.selectedModel[n.settings.idProp])&&n.selectedModel[n.settings.idProp]===e:h(e)},function(){n.$dropdownTrigger=s.children()[0],n.externalEvents={onItemSelect:angular.noop,onItemDeselect:angular.noop,onSelectAll:angular.noop,onDeselectAll:angular.noop,onInitDone:angular.noop,onMaxSelectionReached:angular.noop},n.settings={useFontAwesome:!1,dynamicTitle:!0,scrollable:!1,scrollableHeight:"300px",closeOnBlur:!0,displayProp:"label",idProp:"id",enableSearch:!1,selectionLimit:0,showCheckAll:!0,showUncheckAll:!0,closeOnSelect:!1,buttonClasses:"btn btn-default",closeOnDeselect:!1,checkboxes:l.checkboxes||void 0,groupBy:l.groupBy||void 0,groupByTextProvider:null,smartButtonMaxItems:0,smartButtonTextConverter:angular.noop},n.texts={checkAll:"Check All",uncheckAll:"Uncheck All",selectionCount:"checked",selectionOf:"/",searchPlaceholder:"Search...",buttonDefaultText:"Select",dynamicButtonTextSuffix:"checked"},n.searchFilter=n.searchFilter||"",angular.isDefined(n.settings.groupBy)&&n.$watch("options",function(t){angular.isDefined(t)&&(n.orderedItems=e("orderBy")(t,n.settings.groupBy))}),angular.extend(n.settings,n.extraSettings||[]),angular.extend(n.externalEvents,n.events||[]),angular.extend(n.texts,n.translationTexts),n.singleSelection=1===n.settings.selectionLimit,n.style={},n.style.check=n.settings.useFontAwesome?"fa fa-check":"glyphicon glyphicon-ok",n.style.remove=n.settings.useFontAwesome?"fa fa-cross":"glyphicon glyphicon-remove",n.singleSelection&&angular.isArray(n.selectedModel)&&0===n.selectedModel.length&&(n.selectedModel={}),n.settings.closeOnBlur&&(t.on("click",m),n.$on("$destroy",function(){t.off("click",m)})),n.externalEvents.onInitDone()}()}}}]),angular.module("angular-dropdown-multiselect").run(["$templateCache",function(e){e.put("src/partials/dropdown-multiselect.html",'<div class="multiselect-parent btn-group dropdown-multiselect">\n\n  <button type="button" class="dropdown-toggle" ng-class="settings.buttonClasses" ng-click="toggleDropdown()" ng-disabled="ngDisabled">{{getButtonText()}}&nbsp;<span class="caret"></span></button>\n\n  <ul class="dropdown-menu dropdown-menu-form" ng-style="{display: open ? \'block\' : \'none\', height: settings.scrollable ? settings.scrollableHeight : \'auto\' }" style="overflow: scroll">\n    <li ng-show="settings.showCheckAll && settings.selectionLimit == 0">\n      <a ng-click="selectAll()"><span ng-class="style.check"></span> {{texts.checkAll}}</a>\n    </li>\n    <li ng-show="settings.showUncheckAll">\n      <a ng-click="deselectAll();"><span ng-class="style.remove"></span> {{texts.uncheckAll}}</a>\n    </li>\n\n    <li ng-show="(settings.showCheckAll && settings.selectionLimit == 0) || settings.showUncheckAll" class="divider"></li>\n\n    <li ng-show="settings.enableSearch">\n      <div class="dropdown-header">\n        <input type="text" class="form-control" style="width: 100%;" ng-model="searchFilter" placeholder="{{texts.searchPlaceholder}}" />\n      </div>\n    </li>\n\n    <li ng-show="settings.enableSearch" class="divider"></li>\n\n    <li ng-if="settings.groupBy" ng-repeat-start="option in orderedItems | filter: searchFilter" ng-show="option[settings.groupBy] !== orderedItems[$index - 1][settings.groupBy]" role="presentation" class="dropdown-header">\n      {{getGroupTitle(option[settings.groupBy])}}\n    </li>\n\n    <li ng-if="settings.groupBy" role="presentation" ng-repeat-end>\n      <a role="menuitem" tabindex="-1" ng-click="toggleItem(option[settings.idProp])">\n        <div ng-if="settings.checkboxes" class="checkbox">\n          <label>\n            <input class="checkboxInput" type="checkbox" ng-click="checkboxClick($event, option[settings.idProp])" ng-checked="isChecked(option[settings.idProp])" />\n            {{option[settings.displayProp]}}\n          </label>\n        </div>\n        <div ng-if="!settings.checkboxes">\n          <span ng-class="isChecked(option[settings.idProp]) ? style.check : \'\'"></span> {{option[settings.displayProp]}}\n        </div>\n      </a>\n    </li>\n\n    <li ng-if="!settings.groupBy" role="presentation" ng-repeat="option in options | filter: searchFilter">\n      <a role="menuitem" tabindex="-1" ng-click="toggleItem(option[settings.idProp])">\n        <div ng-if="settings.checkboxes" class="checkbox">\n          <label>\n            <input class="checkboxInput" type="checkbox" ng-click="checkboxClick($event, option[settings.idProp])" ng-checked="isChecked(option[settings.idProp])" />\n            {{option[settings.displayProp]}}\n          </label>\n        </div>\n        <div ng-if="!settings.checkboxes">\n          <span ng-class="isChecked(option[settings.idProp]) ? style.check : \'\'"></span> {{option[settings.displayProp]}}\n        </div>\n      </a>\n    </li>\n\n    <li class="divider" ng-show="settings.selectionLimit > 1"></li>\n\n    <li role="presentation" ng-show="settings.selectionLimit > 1">\n      <a role="menuitem">{{selectedModel.length}} {{texts.selectionOf}} {{settings.selectionLimit}} {{texts.selectionCount}}</a>\n    </li>\n  </ul>\n</div>\n')}]);
//# sourceMappingURL=angular-dropdown-multiselect.min.js.map