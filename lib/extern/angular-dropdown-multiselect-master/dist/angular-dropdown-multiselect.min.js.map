{"version":3,"sources":["angular-dropdown-multiselect.js","templates.js"],"names":["directiveModule","angular","module","directive","$filter","$document","$compile","$parse","restrict","scope","selectedModel","options","extraSettings","events","searchFilter","translationTexts","groupBy","ngDisabled","templateUrl","link","$scope","$element","$attrs","isModelEmpty","numberOfSelectedItem","getItemDisplayText","optionItem","displayText","settings","displayProp","converterResponse","smartButtonTextConverter","totalSelected","singleSelection","isDefined","idProp","length","getSmartButtonTitle","itemsText","forEach","isChecked","push","smartButtonMaxItems","slice","join","getDefaultButtonTitle","titlePieces","texts","dynamicButtonTextSuffix","buttonDefaultText","getFindObj","id","findObj","find","collection","queryObj","isArray","i","copy","findIndex","getFinalObj","finalObj","objExists","exists","isSelectionLimitExceeded","selectionLimit","closeOnBlur","e","target","parentElement","parentFound","className","indexOf","$dropdownTrigger","$apply","open","toggleDropdown","checkboxClick","$event","toggleItem","stopImmediatePropagation","getGroupTitle","groupValue","groupByTextProvider","getButtonText","title","dynamicTitle","selectAll","deselectAll","sendEvent","value","selectItem","externalEvents","onSelectAll","params","isUndefined","splice","onDeselectAll","item","onItemSelect","deselectItem","onItemDeselect","children","noop","onInitDone","onMaxSelectionReached","useFontAwesome","scrollable","scrollableHeight","enableSearch","showCheckAll","showUncheckAll","closeOnSelect","buttonClasses","closeOnDeselect","checkboxes","undefined","checkAll","uncheckAll","selectionCount","selectionOf","searchPlaceholder","$watch","newValue","orderedItems","extend","style","check","remove","on","$on","off","run","$templateCache","put"],"mappings":"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","file":"angular-dropdown-multiselect.min.js","sourcesContent":["'use strict';\n\nvar directiveModule = angular.module('angular-dropdown-multiselect', []);\n\ndirectiveModule.directive('ngDropdownMultiselect', ['$filter', '$document',\n    '$compile', '$parse',\n    function ($filter, $document, $compile, $parse) {\n\n  return {\n    restrict: 'AE',\n    scope: {\n      selectedModel: '=',\n      options: '=',\n      extraSettings: '=',\n      events: '=',\n      searchFilter: '=?',\n      translationTexts: '=',\n      groupBy: '@',\n      ngDisabled: '='\n    },\n    templateUrl: 'src/partials/dropdown-multiselect.html',\n    link: function ($scope, $element, $attrs) {\n\n      var isModelEmpty = function() {\n        return numberOfSelectedItem() === 0;\n      };\n\n\n      var getItemDisplayText = function(optionItem) {\n        var displayText = optionItem[$scope.settings.displayProp];\n        var converterResponse = $scope.settings.smartButtonTextConverter(displayText, optionItem);\n        return converterResponse || displayText;\n      };\n\n\n      var numberOfSelectedItem = function() {\n        var totalSelected;\n        if ($scope.singleSelection) {\n          totalSelected = ($scope.selectedModel !== null && angular.isDefined($scope.selectedModel[$scope.settings.idProp])) ? 1 : 0;\n        } else {\n          totalSelected = angular.isDefined($scope.selectedModel) ? $scope.selectedModel.length : 0;\n        }\n        return totalSelected;\n      };\n\n\n      var getSmartButtonTitle = function() {\n        var itemsText = [];\n        angular.forEach($scope.options, function (optionItem) {\n          if ($scope.isChecked(optionItem[$scope.settings.idProp])) {\n            itemsText.push(getItemDisplayText(optionItem));\n          }\n        });\n        if (numberOfSelectedItem() > $scope.settings.smartButtonMaxItems) {\n          itemsText = itemsText.slice(0, $scope.settings.smartButtonMaxItems);\n          itemsText.push('...');\n        }\n        return itemsText.join(', ');\n      };\n\n\n      var getDefaultButtonTitle = function() {\n        var totalSelected = numberOfSelectedItem();\n        var titlePieces = [totalSelected, $scope.texts.dynamicButtonTextSuffix];\n        if (totalSelected === 0) {\n          titlePieces = [$scope.texts.buttonDefaultText];\n        }\n        return titlePieces.join(' ');\n      };\n\n\n      var getFindObj = function(id) {\n        var findObj = {};\n        findObj[$scope.settings.idProp] = id;\n        return findObj;\n      };\n\n\n      var find = function(collection, queryObj) {\n        if (angular.isArray(collection)) {\n          for (var i = 0; i < collection.length; i++) {\n            if (collection[i][$scope.settings.idProp] == queryObj[$scope.settings.idProp]) {\n              return collection[i];\n            }\n          }\n          return null;\n        } else {\n          if ($scope.selectedModel[$scope.settings.idProp] == queryObj[$scope.settings.idProp]) {\n            return angular.copy($scope.selectedModel);\n          }\n        }\n      };\n\n\n      var findIndex = function(collection, queryObj) {\n        if (angular.isArray(collection)) {\n          for (var i = 0; i < collection.length; i++) {\n            if (collection[i][$scope.settings.idProp] == queryObj[$scope.settings.idProp]) {\n              return i;\n            }\n          }\n        }\n        return -1;\n      };\n\n\n      var getFinalObj = function(id) {\n        var findObj = getFindObj(id);\n        var finalObj = find($scope.options, findObj);\n        return angular.copy(finalObj);\n      };\n\n\n      var objExists = function(id) {\n        var findObj = getFindObj(id);\n        var exists = false;\n        if ($scope.singleSelection) {\n          exists = $scope.selectedModel[$scope.settings.idProp] == id;\n        } else {\n          exists = findIndex($scope.selectedModel, findObj) !== -1;\n        }\n        return exists;\n      };\n\n\n      var isSelectionLimitExceeded = function() {\n        return $scope.settings.selectionLimit > 0 &&\n          numberOfSelectedItem() >= $scope.settings.selectionLimit;\n      };\n\n\n      var closeOnBlur = function(e) {\n        var target = e.target.parentElement;\n        var parentFound = false;\n        while (angular.isDefined(target) && target !== null && !parentFound) {\n          if (target.className.indexOf('multiselect-parent') != -1 && !parentFound) {\n            if (target === $scope.$dropdownTrigger) {\n              parentFound = true;\n            }\n          }\n          target = target.parentElement;\n        }\n        if (!parentFound) {\n          $scope.$apply(function () {\n            $scope.open = false;\n          });\n        }\n      };\n\n\n      $scope.toggleDropdown = function () {\n        $scope.open = !$scope.open;\n      };\n\n\n      $scope.checkboxClick = function ($event, id) {\n        $scope.toggleItem(id);\n        $event.stopImmediatePropagation();\n      };\n\n\n      $scope.getGroupTitle = function (groupValue) {\n        if ($scope.settings.groupByTextProvider !== null) {\n          return $scope.settings.groupByTextProvider(groupValue);\n        }\n        return groupValue;\n      };\n\n\n      $scope.getButtonText = function () {\n        var title = '';\n        if ($scope.settings.dynamicTitle && !isModelEmpty()) {\n          if ($scope.settings.smartButtonMaxItems > 0) {\n            title = getSmartButtonTitle();\n          } else {\n            title = getDefaultButtonTitle();\n          }\n        } else {\n          title = $scope.texts.buttonDefaultText;\n        }\n        return title;\n      };\n\n\n      $scope.selectAll = function () {\n        $scope.deselectAll({sendEvent: false});\n\n        angular.forEach($scope.options, function (value) {\n          $scope.selectItem(value[$scope.settings.idProp], {sendEvent: false});\n        });\n\n        $scope.externalEvents.onSelectAll();\n      };\n\n\n      $scope.deselectAll = function (params) {\n        params = params || {};\n        if (angular.isUndefined(params.sendEvent)) {\n          params.sendEvent = true;\n        }\n\n        if ($scope.singleSelection) {\n          $scope.selectedModel = {};\n        } else {\n          $scope.selectedModel.splice(0, numberOfSelectedItem());\n        }\n\n        if (params.sendEvent) {\n          $scope.externalEvents.onDeselectAll();\n        }\n      };\n\n\n      $scope.selectItem = function(id, params) {\n        var params = params || {};\n        if (angular.isUndefined(params.sendEvent)) {\n          params.sendEvent = true;\n        }\n        var finalObj = getFinalObj(id);\n        var sendEvent = function(item) {\n          if (params.sendEvent) {\n            $scope.externalEvents.onItemSelect(item);\n          }\n        };\n        if ($scope.singleSelection) {\n          $scope.selectedModel = finalObj;\n          sendEvent(finalObj);\n        } else if (!objExists(id) && !isSelectionLimitExceeded()) {\n          $scope.selectedModel.push(finalObj);\n          sendEvent(finalObj);\n        }\n      };\n\n\n      $scope.deselectItem = function(id) {\n        var finalObj = getFinalObj(id);\n        if ($scope.singleSelection) {\n          $scope.selectedModel = {};\n        } else {\n          $scope.selectedModel.splice(findIndex($scope.selectedModel, finalObj), 1);\n        }\n        $scope.externalEvents.onItemDeselect(finalObj);\n      };\n\n\n      $scope.toggleItem = function(id) {\n        objExists(id) ? $scope.deselectItem(id) : $scope.selectItem(id);\n      };\n\n\n      $scope.isChecked = function (id) {\n        if ($scope.singleSelection) {\n          return $scope.selectedModel !== null &&\n            angular.isDefined($scope.selectedModel[$scope.settings.idProp]) &&\n            $scope.selectedModel[$scope.settings.idProp] === id;\n        }\n        return objExists(id);\n      };\n\n\n      (function constructor() {\n        $scope.$dropdownTrigger = $element.children()[0];\n\n        $scope.externalEvents = {\n          onItemSelect: angular.noop,\n          onItemDeselect: angular.noop,\n          onSelectAll: angular.noop,\n          onDeselectAll: angular.noop,\n          onInitDone: angular.noop,\n          onMaxSelectionReached: angular.noop\n        };\n\n        $scope.settings = {\n          useFontAwesome: false,\n          dynamicTitle: true,\n          scrollable: false,\n          scrollableHeight: '300px',\n          closeOnBlur: true,\n          displayProp: 'label',\n          idProp: 'id',\n          enableSearch: false,\n          selectionLimit: 0,\n          showCheckAll: true,\n          showUncheckAll: true,\n          closeOnSelect: false,\n          buttonClasses: 'btn btn-default',\n          closeOnDeselect: false,\n          checkboxes: $attrs.checkboxes || undefined,\n          groupBy: $attrs.groupBy || undefined,\n          groupByTextProvider: null,\n          smartButtonMaxItems: 0,\n          smartButtonTextConverter: angular.noop\n        };\n\n        $scope.texts = {\n          checkAll: 'Check All',\n          uncheckAll: 'Uncheck All',\n          selectionCount: 'checked',\n          selectionOf: '/',\n          searchPlaceholder: 'Search...',\n          buttonDefaultText: 'Select',\n          dynamicButtonTextSuffix: 'checked'\n        };\n\n        $scope.searchFilter = $scope.searchFilter || '';\n\n        if (angular.isDefined($scope.settings.groupBy)) {\n          $scope.$watch('options', function (newValue) {\n            if (angular.isDefined(newValue)) {\n              $scope.orderedItems = $filter('orderBy')(newValue, $scope.settings.groupBy);\n            }\n          });\n        }\n\n        angular.extend($scope.settings, $scope.extraSettings || []);\n        angular.extend($scope.externalEvents, $scope.events || []);\n        angular.extend($scope.texts, $scope.translationTexts);\n\n        $scope.singleSelection = $scope.settings.selectionLimit === 1;\n\n        $scope.style = {};\n        $scope.style.check = $scope.settings.useFontAwesome ? 'fa fa-check' : 'glyphicon glyphicon-ok';\n        $scope.style.remove = $scope.settings.useFontAwesome ? 'fa fa-cross' : 'glyphicon glyphicon-remove';\n\n        if ($scope.singleSelection) {\n          if (angular.isArray($scope.selectedModel) && $scope.selectedModel.length === 0) {\n            $scope.selectedModel = {};\n          }\n        }\n\n        if ($scope.settings.closeOnBlur) {\n          $document.on('click', closeOnBlur);\n          $scope.$on('$destroy', function() {\n            $document.off('click', closeOnBlur)\n          });\n        }\n\n        $scope.externalEvents.onInitDone();\n      })();\n\n    }\n  };\n}]);\n","angular.module(\"angular-dropdown-multiselect\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"src/partials/dropdown-multiselect.html\",\"<div class=\\\"multiselect-parent btn-group dropdown-multiselect\\\">\\n\\n  <button type=\\\"button\\\" class=\\\"dropdown-toggle\\\" ng-class=\\\"settings.buttonClasses\\\" ng-click=\\\"toggleDropdown()\\\" ng-disabled=\\\"ngDisabled\\\">{{getButtonText()}}&nbsp;<span class=\\\"caret\\\"></span></button>\\n\\n  <ul class=\\\"dropdown-menu dropdown-menu-form\\\" ng-style=\\\"{display: open ? \\'block\\' : \\'none\\', height: settings.scrollable ? settings.scrollableHeight : \\'auto\\' }\\\" style=\\\"overflow: scroll\\\">\\n    <li ng-show=\\\"settings.showCheckAll && settings.selectionLimit == 0\\\">\\n      <a ng-click=\\\"selectAll()\\\"><span ng-class=\\\"style.check\\\"></span> {{texts.checkAll}}</a>\\n    </li>\\n    <li ng-show=\\\"settings.showUncheckAll\\\">\\n      <a ng-click=\\\"deselectAll();\\\"><span ng-class=\\\"style.remove\\\"></span> {{texts.uncheckAll}}</a>\\n    </li>\\n\\n    <li ng-show=\\\"(settings.showCheckAll && settings.selectionLimit == 0) || settings.showUncheckAll\\\" class=\\\"divider\\\"></li>\\n\\n    <li ng-show=\\\"settings.enableSearch\\\">\\n      <div class=\\\"dropdown-header\\\">\\n        <input type=\\\"text\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\" ng-model=\\\"searchFilter\\\" placeholder=\\\"{{texts.searchPlaceholder}}\\\" />\\n      </div>\\n    </li>\\n\\n    <li ng-show=\\\"settings.enableSearch\\\" class=\\\"divider\\\"></li>\\n\\n    <li ng-if=\\\"settings.groupBy\\\" ng-repeat-start=\\\"option in orderedItems | filter: searchFilter\\\" ng-show=\\\"option[settings.groupBy] !== orderedItems[$index - 1][settings.groupBy]\\\" role=\\\"presentation\\\" class=\\\"dropdown-header\\\">\\n      {{getGroupTitle(option[settings.groupBy])}}\\n    </li>\\n\\n    <li ng-if=\\\"settings.groupBy\\\" role=\\\"presentation\\\" ng-repeat-end>\\n      <a role=\\\"menuitem\\\" tabindex=\\\"-1\\\" ng-click=\\\"toggleItem(option[settings.idProp])\\\">\\n        <div ng-if=\\\"settings.checkboxes\\\" class=\\\"checkbox\\\">\\n          <label>\\n            <input class=\\\"checkboxInput\\\" type=\\\"checkbox\\\" ng-click=\\\"checkboxClick($event, option[settings.idProp])\\\" ng-checked=\\\"isChecked(option[settings.idProp])\\\" />\\n            {{option[settings.displayProp]}}\\n          </label>\\n        </div>\\n        <div ng-if=\\\"!settings.checkboxes\\\">\\n          <span ng-class=\\\"isChecked(option[settings.idProp]) ? style.check : \\'\\'\\\"></span> {{option[settings.displayProp]}}\\n        </div>\\n      </a>\\n    </li>\\n\\n    <li ng-if=\\\"!settings.groupBy\\\" role=\\\"presentation\\\" ng-repeat=\\\"option in options | filter: searchFilter\\\">\\n      <a role=\\\"menuitem\\\" tabindex=\\\"-1\\\" ng-click=\\\"toggleItem(option[settings.idProp])\\\">\\n        <div ng-if=\\\"settings.checkboxes\\\" class=\\\"checkbox\\\">\\n          <label>\\n            <input class=\\\"checkboxInput\\\" type=\\\"checkbox\\\" ng-click=\\\"checkboxClick($event, option[settings.idProp])\\\" ng-checked=\\\"isChecked(option[settings.idProp])\\\" />\\n            {{option[settings.displayProp]}}\\n          </label>\\n        </div>\\n        <div ng-if=\\\"!settings.checkboxes\\\">\\n          <span ng-class=\\\"isChecked(option[settings.idProp]) ? style.check : \\'\\'\\\"></span> {{option[settings.displayProp]}}\\n        </div>\\n      </a>\\n    </li>\\n\\n    <li class=\\\"divider\\\" ng-show=\\\"settings.selectionLimit > 1\\\"></li>\\n\\n    <li role=\\\"presentation\\\" ng-show=\\\"settings.selectionLimit > 1\\\">\\n      <a role=\\\"menuitem\\\">{{selectedModel.length}} {{texts.selectionOf}} {{settings.selectionLimit}} {{texts.selectionCount}}</a>\\n    </li>\\n  </ul>\\n</div>\\n\");}]);"],"sourceRoot":"/source/"}